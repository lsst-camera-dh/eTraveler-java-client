package org.lsst.camera.etraveler.javaclient.getHarnessed;

import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Set;
import java.util.Collection;

import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;


/**
   Store data associated with one schema, generated by a single run.
   For each schema internally have HashMap keyed by step name.  Value for
   each is ArrayList<HashMap <String, Object> >.  That is a list of
   instances.
 */
public class PerSchema implements Map<String, PerStep> {
  private HashMap<String, PerStep> m_data = null;

  public PerSchema() {
    m_data = new HashMap<String, PerStep> ();
  }

  public PerStep addStep(String stepName) {
    m_data.put(stepName, new PerStep());
    return m_data.get(stepName);
  }

  public PerStep  findStep(String stepName) {
    return m_data.get(stepName);
  }

  public PerStep  findOrAddStep(String stepName) {
    if (findStep(stepName) != null) return findStep(stepName);
    return addStep(stepName);
  }

  public int prune(Pair<String, Object> filter, int dtype)
  throws GetHarnessedException {
    
    for (String stepName : m_data.keySet() ) {
      dtype = m_data.get(stepName).prune(filter, dtype);
      if (dtype == PerStep.DT_ABSENT) return dtype;
    }
    return dtype;
  }

  public void clear() {
    m_data.clear();
  }

  public int size() {
    return m_data.size();
  }
  
  public boolean containsKey(Object key) {
    return m_data.containsKey(key);
  }

  public boolean containsValue(Object value) {
    return m_data.containsValue(value);
  }

  public Set<Map.Entry<String, PerStep>> entrySet() {
    return m_data.entrySet();
  }

  public boolean equals(Object o) {
    return m_data.equals(o);
  }

  public PerStep get(Object key) {
    return m_data.get(key);
  }

  public int hashCode() {
    return m_data.hashCode();
  }

  public boolean isEmpty() {
    return m_data.isEmpty();
  }

  public Set<String> keySet() {
    return m_data.keySet();
  }

  public PerStep put(String key, PerStep value) {
    return m_data.put(key, value);
  }

  public void putAll(Map<? extends String, ? extends PerStep> m) {
    m_data.putAll(m);
  }

  public PerStep remove(Object key) {
    return m_data.remove(key);
  }

  public Collection<PerStep> values() {
    return m_data.values();
  }
                                                                     
}

                   
      
